{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Oblivion\\\\dummy\\\\Filmpire\\\\src\\\\utils\\\\ToggleColoMode.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext, useMemo } from 'react';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ColorModeContext = /*#__PURE__*/createContext();\n\nconst ToggleColoMode = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [mode, setMode] = useState('light');\n\n  const toggleColorMode = () => {\n    setMode(prevMode => prevMode === 'light' ? 'dark' : 'light');\n  };\n\n  const theme = useMemo(() => createTheme({\n    palette: {\n      mode\n    }\n  }), [mode]);\n  return /*#__PURE__*/_jsxDEV(ColorModeContext.Provider, {\n    value: {\n      mode,\n      setMode,\n      toggleColorMode\n    },\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 7\n  }, this);\n};\n\n_s(ToggleColoMode, \"u8zjN1kWJUDh6oH/uPWW9KokeTA=\");\n\n_c = ToggleColoMode;\nexport default ToggleColoMode;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToggleColoMode\");","map":{"version":3,"names":["React","useState","createContext","useMemo","ThemeProvider","createTheme","ColorModeContext","ToggleColoMode","children","mode","setMode","toggleColorMode","prevMode","theme","palette"],"sources":["C:/Users/Oblivion/dummy/Filmpire/src/utils/ToggleColoMode.jsx"],"sourcesContent":["import React, { useState, createContext, useMemo } from 'react';\r\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\r\n\r\nexport const ColorModeContext = createContext();\r\n\r\nconst ToggleColoMode = ({ children }) => {\r\n   const [mode, setMode] = useState('light');\r\n\r\n   const toggleColorMode = () => {\r\n      setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\r\n   };\r\n\r\n   const theme = useMemo(()=> createTheme({\r\n      palette: {\r\n         mode,\r\n      },\r\n   }),[mode]);\r\n\r\n   return (\r\n      <ColorModeContext.Provider value={{ mode, setMode, toggleColorMode }}>\r\n         <ThemeProvider theme={theme}>\r\n            {children}\r\n         </ThemeProvider>\r\n      </ColorModeContext.Provider>\r\n  )\r\n}\r\n\r\nexport default ToggleColoMode"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,EAAyCC,OAAzC,QAAwD,OAAxD;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,sBAA3C;;AAEA,OAAO,MAAMC,gBAAgB,gBAAGJ,aAAa,EAAtC;;AAEP,MAAMK,cAAc,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EACtC,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,OAAD,CAAhC;;EAEA,MAAMU,eAAe,GAAG,MAAM;IAC3BD,OAAO,CAAEE,QAAD,IAAeA,QAAQ,KAAK,OAAb,GAAuB,MAAvB,GAAgC,OAAhD,CAAP;EACF,CAFD;;EAIA,MAAMC,KAAK,GAAGV,OAAO,CAAC,MAAKE,WAAW,CAAC;IACpCS,OAAO,EAAE;MACNL;IADM;EAD2B,CAAD,CAAjB,EAIlB,CAACA,IAAD,CAJkB,CAArB;EAMA,oBACG,QAAC,gBAAD,CAAkB,QAAlB;IAA2B,KAAK,EAAE;MAAEA,IAAF;MAAQC,OAAR;MAAiBC;IAAjB,CAAlC;IAAA,uBACG,QAAC,aAAD;MAAe,KAAK,EAAEE,KAAtB;MAAA,UACIL;IADJ;MAAA;MAAA;MAAA;IAAA;EADH;IAAA;IAAA;IAAA;EAAA,QADH;AAOF,CApBD;;GAAMD,c;;KAAAA,c;AAsBN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}